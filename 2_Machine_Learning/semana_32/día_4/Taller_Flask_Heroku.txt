Ahora vamos a trabajar con git y con Heroku.
Referencia:
https://stackabuse.com/deploying-a-flask-application-to-heroku/

Pasos:

1) Créate una cuenta en www.github.com

2) Descárgate git si todavía no lo tienes
https://git-scm.com/download/

3) Usa estos pasos para tener conectividad entre git y GitHub

Importante: la clave pública y privada déjalas guardadas en el directorio que te propone
por defecto

C:\Users\MI_USUARIO\.ssh

4) Instala gunicorn
pip install gunicorn

5) Crea un archivo sin extensión que se llame Procfile
escribe dentro:

web: gunicorn app:app

el segundo "app" es el nombre de la aplicación, se suele llamar siempre app

Através del archivo Procfile (archivo de configuración) le pasamos una serie de archivo a el servidor(Heroku):El modelo, los scripts.py y Templates, fotos u otros recursos.

6) Crea requirements.txt 
El docuemto de 'requirements.txt' informa al servidor de las librerías que se necesita usar para la ejecución de la web
Escribe dentro:

Flask==1.1.1
Flask-WeasyPrint==0.6
gunicorn==20.0.4
numpy==1.19.4
numpydoc==0.9.1
pandas==1.1.1
pandas-datareader==0.9.0
pandas-profiling==2.9.0
pandocfilters==1.4.2
pickleshare==0.7.5
requests==2.24.0
requests-oauthlib==1.3.0
scikit-image==0.15.0
scikit-learn==0.24.0
anaconda-client==1.2.2

7) Crea una cuenta en Heroku gratuita

8) Elige el nombre de tu aplicación (créalo en Heroku en la web)
nombre ("orchid-predict")

9) Instala el CLI  de Heroku

10) Abre git bash

ve al directorio /Flask donde tienes los archivos

git init .

git add app.py Procfile requirements.txt static templates iri.pkl

git commit -m "this is a commit"

11) Abre un terminal cmd (Windows) y lógate en heroku

heroku --version
heroku login

12)  Al mismo nombre que elegiste cuando creaste la aplicación en la web de Heroku

heroku git:remote -a {your-project-name} 

heroku git:remote -a orchid-predict <==> sin llaves

13)

git push heroku master

14) Cuando acabe, te dará una URL.
Pruébala en un navegador. ¡Ya tienes listo tu clasificador en internet!
